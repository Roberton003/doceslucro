#!/bin/bash

# Script de Verifica√ß√£o de Seguran√ßa - Doces GIamor Backend
# Verifica vulnerabilidades cr√≠ticas de seguran√ßa

set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîí Verifica√ß√£o de Seguran√ßa - Doces GIamor Backend${NC}"
echo "=============================================="

# 1. Verificar SECRET_KEY
echo -e "\n${YELLOW}[1/5] Verificando SECRET_KEY...${NC}"
if grep -q "SECRET_KEY.*=.*\"" config/settings/base.py; then
    echo -e "${RED}‚ùå SECRET_KEY ainda est√° hardcoded!${NC}"
    exit 1
elif grep -q "config('SECRET_KEY'" config/settings/base.py; then
    echo -e "${GREEN}‚úÖ SECRET_KEY configurada via vari√°vel de ambiente${NC}"
else
    echo -e "${RED}‚ùå SECRET_KEY n√£o encontrada ou mal configurada!${NC}"
    exit 1
fi

# 2. Verificar permiss√µes de arquivos
echo -e "\n${YELLOW}[2/5] Verificando permiss√µes de arquivos...${NC}"
check_permission() {
    file=$1
    expected=$2
    if [ -f "$file" ]; then
        perms=$(stat -c "%a" "$file")
        if [ "$perms" != "$expected" ]; then
            echo -e "${RED}‚ùå $file tem permiss√µes $perms (esperado: $expected)${NC}"
            return 1
        else
            echo -e "${GREEN}‚úÖ $file tem permiss√µes corretas ($perms)${NC}"
            return 0
        fi
    else
        echo -e "${YELLOW}‚ö† $file n√£o encontrado${NC}"
        return 1
    fi
}

check_permission ".env" "600"
check_permission "db.sqlite3" "600"
check_permission "config/settings/base.py" "600"

# 3. Verificar depend√™ncias
echo -e "\n${YELLOW}[3/5] Verificando depend√™ncias...${NC}"
if [ ! -s "requirements.txt" ]; then
    echo -e "${RED}‚ùå requirements.txt est√° vazio!${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ requirements.txt cont√©m depend√™ncias${NC}"
fi

# 4. Verificar configura√ß√µes de produ√ß√£o
echo -e "\n${YELLOW}[4/5] Verificando configura√ß√µes de produ√ß√£o...${NC}"
if grep -q "SECURE_SSL_REDIRECT.*=.*True" config/settings/production.py; then
    echo -e "${GREEN}‚úÖ SSL redirect habilitado${NC}"
else
    echo -e "${YELLOW}‚ö† SSL redirect n√£o encontrado${NC}"
fi

if grep -q "SECURE_HSTS_SECONDS.*=.*31536000" config/settings/production.py; then
    echo -e "${GREEN}‚úÖ HSTS configurado${NC}"
else
    echo -e "${YELLOW}‚ö† HSTS n√£o encontrado${NC}"
fi

# 5. Verificar configura√ß√µes de throttling
echo -e "\n${YELLOW}[5/5] Verificando rate limiting...${NC}"
if grep -q "DEFAULT_THROTTLE_CLASSES" config/settings/base.py; then
    echo -e "${GREEN}‚úÖ Rate limiting configurado${NC}"
else
    echo -e "${RED}‚ùå Rate limiting n√£o encontrado!${NC}"
fi

echo -e "\n${BLUE}==============================================${NC}"
echo -e "${GREEN}‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da!${NC}"
echo -e "${BLUE}==============================================${NC}"