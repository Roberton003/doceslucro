#!/usr/bin/env python3
"""
Orquestrador Aut√¥nomo - Copilot CLI com Ag√™ncia para Delegar Tarefas
Permite que o Copilot tome decis√µes e delegue automaticamente para Qwen
"""

import os
import json
import subprocess
import asyncio
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
import re

class AgentRole(Enum):
    """Pap√©is dos agentes no sistema"""
    ORCHESTRATOR = "orchestrator"  # Copilot - decide e coordena
    EXECUTOR = "executor"           # Qwen - executa tarefas espec√≠ficas

class TaskComplexity(Enum):
    """Complexidade da tarefa"""
    SIMPLE = "simple"       # Qwen pode fazer sozinho
    MODERATE = "moderate"   # Copilot supervisiona
    COMPLEX = "complex"     # Copilot faz, Qwen auxilia

@dataclass
class WorkContext:
    """Contexto do trabalho atual"""
    project_path: str
    current_files: List[str]
    language: str
    framework: Optional[str] = None
    current_task: Optional[str] = None
    changes_made: List[Dict] = None

class DecisionEngine:
    """
    Motor de decis√£o do Copilot para determinar quando e como delegar
    """
    
    # Crit√©rios para delega√ß√£o autom√°tica
    DELEGATION_RULES = {
        'unit_tests': {
            'delegate': True,
            'executor': 'qwen',
            'reason': 'Testes unit√°rios s√£o repetitivos e bem definidos'
        },
        'documentation': {
            'delegate': True,
            'executor': 'qwen',
            'reason': 'Documenta√ß√£o pode ser gerada a partir do c√≥digo'
        },
        'code_formatting': {
            'delegate': True,
            'executor': 'qwen',
            'reason': 'Formata√ß√£o √© uma tarefa mec√¢nica'
        },
        'simple_refactoring': {
            'delegate': True,
            'executor': 'qwen',
            'reason': 'Refatora√ß√µes simples s√£o de baixo risco'
        },
        'translation': {
            'delegate': True,
            'executor': 'qwen',
            'reason': 'Tradu√ß√£o de strings e mensagens'
        },
        'data_validation': {
            'delegate': True,
            'executor': 'qwen',
            'reason': 'Valida√ß√µes seguem padr√µes conhecidos'
        },
        'architecture_design': {
            'delegate': False,
            'executor': 'copilot',
            'reason': 'Decis√µes arquiteturais exigem contexto profundo'
        },
        'complex_algorithms': {
            'delegate': False,
            'executor': 'copilot',
            'reason': 'Algoritmos complexos precisam de racioc√≠nio avan√ßado'
        },
        'api_integration': {
            'delegate': False,
            'executor': 'copilot',
            'reason': 'Integra√ß√µes requerem entendimento do sistema'
        }
    }
    
    @staticmethod
    def should_delegate(task_description: str, context: WorkContext) -> Tuple[bool, str]:
        """
        Decide se deve delegar a tarefa para o Qwen
        
        Returns:
            (should_delegate: bool, reason: str)
        """
        task_lower = task_description.lower()
        
        # Verifica padr√µes conhecidos
        for pattern, rule in DecisionEngine.DELEGATION_RULES.items():
            if pattern.replace('_', ' ') in task_lower:
                return rule['delegate'], rule['reason']
        
        # An√°lise heur√≠stica
        simple_keywords = ['add', 'create simple', 'format', 'clean', 'organize', 
                          'comment', 'document', 'translate', 'validate']
        complex_keywords = ['design', 'architect', 'optimize', 'integrate',
                           'implement complex', 'refactor major']
        
        simple_count = sum(1 for kw in simple_keywords if kw in task_lower)
        complex_count = sum(1 for kw in complex_keywords if kw in task_lower)
        
        if simple_count > complex_count:
            return True, "Tarefa identificada como simples por an√°lise heur√≠stica"
        
        return False, "Tarefa requer supervis√£o direta do Copilot"
    
    @staticmethod
    def estimate_complexity(task_description: str) -> TaskComplexity:
        """Estima a complexidade da tarefa"""
        task_lower = task_description.lower()
        
        if any(kw in task_lower for kw in ['architecture', 'design system', 'complex algorithm']):
            return TaskComplexity.COMPLEX
        
        if any(kw in task_lower for kw in ['refactor', 'optimize', 'integrate']):
            return TaskComplexity.MODERATE
        
        return TaskComplexity.SIMPLE

class AutonomousAgent:
    """
    Agente aut√¥nomo que representa o Copilot CLI com capacidade de delega√ß√£o
    """
    
    def __init__(self, project_path: str):
        self.project_path = Path(project_path)
        self.work_context = self._analyze_project()
        self.decision_engine = DecisionEngine()
        self.task_queue: List[Dict] = []
        self.delegated_tasks: Dict[str, Dict] = {}
        self.completed_tasks: List[str] = []
    
    def _analyze_project(self) -> WorkContext:
        """Analisa o projeto atual para entender o contexto"""
        files = []
        languages = set()
        
        for ext in ['.py', '.js', '.ts', '.java', '.go', '.rs']:
            files.extend(self.project_path.glob(f'**/*{ext}'))
            if files:
                languages.add(ext[1:])
        
        return WorkContext(
            project_path=str(self.project_path),
            current_files=[str(f) for f in files[:50]],  # Limita para performance
            language=list(languages)[0] if languages else 'unknown',
            changes_made=[]
        )
    
    def receive_task(self, task_description: str, priority: int = 1):
        """
        Recebe uma nova tarefa e decide automaticamente como proceder
        """
        print(f"\nü§î Copilot analisando tarefa: '{task_description}'")
        
        # Decide se deve delegar
        should_delegate, reason = self.decision_engine.should_delegate(
            task_description, 
            self.work_context
        )
        
        complexity = self.decision_engine.estimate_complexity(task_description)
        
        task = {
            'id': f"task_{len(self.task_queue) + 1}",
            'description': task_description,
            'priority': priority,
            'complexity': complexity,
            'delegated': should_delegate,
            'executor': 'qwen' if should_delegate else 'copilot',
            'reason': reason,
            'status': 'pending'
        }
        
        self.task_queue.append(task)
        
        if should_delegate:
            print(f"‚úÖ Decis√£o: DELEGAR para Qwen")
            print(f"üìã Raz√£o: {reason}")
            self._delegate_to_qwen(task)
        else:
            print(f"üéØ Decis√£o: EXECUTAR diretamente (Copilot)")
            print(f"üìã Raz√£o: {reason}")
            self._execute_locally(task)
    
    def _delegate_to_qwen(self, task: Dict):
        """Delega tarefa para o Qwen com contexto apropriado"""
        print(f"\nüöÄ Delegando para Qwen: {task['id']}")
        
        # Prepara contexto para o Qwen
        context = self._prepare_context_for_delegation(task)
        
        # Cria prompt estruturado
        prompt = self._create_delegation_prompt(task, context)
        
        # Executa via Qwen CLI
        result = self._execute_qwen(prompt, task)
        
        if result['success']:
            print(f"‚úÖ Qwen completou: {task['id']}")
            self._process_delegation_result(task, result)
        else:
            print(f"‚ö†Ô∏è  Qwen falhou, Copilot assumindo: {task['id']}")
            self._execute_locally(task)
    
    def _prepare_context_for_delegation(self, task: Dict) -> Dict:
        """Prepara contexto relevante para a tarefa delegada"""
        context = {
            'project_path': self.work_context.project_path,
            'language': self.work_context.language,
            'framework': self.work_context.framework,
            'task_type': self._classify_task_type(task['description'])
        }
        
        # Adiciona arquivos relevantes
        if 'test' in task['description'].lower():
            context['relevant_files'] = self._find_files_for_testing()
        elif 'document' in task['description'].lower():
            context['relevant_files'] = self._find_files_for_documentation()
        
        return context
    
    def _classify_task_type(self, description: str) -> str:
        """Classifica o tipo da tarefa"""
        desc_lower = description.lower()
        
        if 'test' in desc_lower:
            return 'testing'
        elif 'document' in desc_lower or 'doc' in desc_lower:
            return 'documentation'
        elif 'format' in desc_lower or 'lint' in desc_lower:
            return 'formatting'
        elif 'refactor' in desc_lower:
            return 'refactoring'
        else:
            return 'general'
    
    def _find_files_for_testing(self) -> List[str]:
        """Encontra arquivos que precisam de testes"""
        source_files = []
        test_files = set()
        
        # Encontra arquivos de teste existentes
        for f in self.project_path.glob('**/test_*.py'):
            test_files.add(f.name)
        
        # Encontra arquivos sem testes
        for f in self.project_path.glob('**/*.py'):
            if 'test_' not in f.name and f.name not in test_files:
                source_files.append(str(f))
        
        return source_files[:5]  # Limita para n√£o sobrecarregar
    
    def _find_files_for_documentation(self) -> List[str]:
        """Encontra arquivos que precisam de documenta√ß√£o"""
        undocumented = []
        
        for f in self.project_path.glob('**/*.py'):
            with open(f, 'r', encoding='utf-8', errors='ignore') as file:
                content = file.read()
                # Verifica se falta docstring
                if 'def ' in content and '"""' not in content[:500]:
                    undocumented.append(str(f))
        
        return undocumented[:5]
    
    def _create_delegation_prompt(self, task: Dict, context: Dict) -> str:
        """Cria prompt estruturado para delega√ß√£o"""
        prompt = f"""# TAREFA DELEGADA PELO COPILOT

## Contexto do Projeto
- Linguagem: {context['language']}
- Framework: {context.get('framework', 'N/A')}
- Tipo de Tarefa: {context['task_type']}

## Tarefa
{task['description']}

## Instru√ß√µes
1. Execute a tarefa de forma precisa e completa
2. Siga as conven√ß√µes do projeto
3. Retorne o resultado em formato estruturado
4. Indique se encontrou algum problema

## Arquivos Relevantes
"""
        if 'relevant_files' in context:
            for f in context['relevant_files'][:3]:
                prompt += f"- {f}\n"
        
        prompt += "\n## Execu√ß√£o\nInicie a execu√ß√£o agora."
        
        return prompt
    
    def _execute_qwen(self, prompt: str, task: Dict) -> Dict:
        """Executa o Qwen CLI"""
        try:
            # Simula execu√ß√£o do Qwen CLI
            # Em produ√ß√£o, substituir por subprocess real
            cmd = ['qwen', '--prompt', prompt, '--json']
            
            # Para este exemplo, vamos simular
            print("   üìù Qwen processando...")
            
            # Simula√ß√£o de resultado
            result = {
                'success': True,
                'output': f"Tarefa '{task['description']}' executada com sucesso",
                'files_modified': [],
                'warnings': []
            }
            
            # Em produ√ß√£o, usar:
            # result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            return result
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def _process_delegation_result(self, task: Dict, result: Dict):
        """Processa o resultado da delega√ß√£o e valida"""
        print(f"\nüîç Copilot validando resultado de: {task['id']}")
        
        # Valida o resultado
        is_valid = self._validate_result(task, result)
        
        if is_valid:
            print("‚úÖ Resultado aprovado!")
            task['status'] = 'completed'
            self.completed_tasks.append(task['id'])
            
            # Atualiza contexto
            self.work_context.changes_made.append({
                'task_id': task['id'],
                'description': task['description'],
                'executor': 'qwen',
                'result': result
            })
        else:
            print("‚ö†Ô∏è  Resultado precisa de corre√ß√£o, Copilot ajustando...")
            self._fix_delegation_result(task, result)
    
    def _validate_result(self, task: Dict, result: Dict) -> bool:
        """Valida se o resultado da delega√ß√£o est√° correto"""
        # Valida√ß√µes b√°sicas
        if not result.get('success'):
            return False
        
        # Valida√ß√µes espec√≠ficas por tipo
        task_type = self._classify_task_type(task['description'])
        
        if task_type == 'testing':
            # Verifica se testes foram criados
            return 'test_' in result.get('output', '')
        
        if task_type == 'documentation':
            # Verifica se documenta√ß√£o foi adicionada
            return '"""' in result.get('output', '') or 'docstring' in result.get('output', '')
        
        return True  # Aprovado por padr√£o
    
    def _fix_delegation_result(self, task: Dict, result: Dict):
        """Corrige resultado da delega√ß√£o se necess√°rio"""
        print("üîß Aplicando corre√ß√µes...")
        # Implementar l√≥gica de corre√ß√£o
        task['status'] = 'completed_with_fixes'
    
    def _execute_locally(self, task: Dict):
        """Executa tarefa diretamente pelo Copilot"""
        print(f"\n‚öôÔ∏è  Copilot executando: {task['id']}")
        print(f"üìù {task['description']}")
        
        # Copilot executa diretamente
        # Aqui entraria a l√≥gica do Copilot CLI
        
        task['status'] = 'completed'
        self.completed_tasks.append(task['id'])
        print("‚úÖ Completado pelo Copilot")
    
    def monitor_and_coordinate(self):
        """
        Loop principal de monitoramento e coordena√ß√£o
        Copilot supervisiona todas as tarefas em andamento
        """
        print("\n" + "="*50)
        print("üéØ COPILOT - MODO AUT√îNOMO ATIVADO")
        print("="*50)
        
        while self.task_queue:
            # Ordena por prioridade
            self.task_queue.sort(key=lambda t: t['priority'], reverse=True)
            
            # Processa pr√≥xima tarefa
            next_task = self.task_queue.pop(0)
            
            if next_task['delegated']:
                self._delegate_to_qwen(next_task)
            else:
                self._execute_locally(next_task)
        
        self._generate_session_report()
    
    def _generate_session_report(self):
        """Gera relat√≥rio da sess√£o de trabalho"""
        total = len(self.completed_tasks)
        delegated = sum(1 for t in self.work_context.changes_made 
                       if t.get('executor') == 'qwen')
        
        report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     RELAT√ìRIO DE SESS√ÉO AUT√îNOMA           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä Estat√≠sticas:
   Total de tarefas: {total}
   ü§ñ Delegadas para Qwen: {delegated}
   üéØ Executadas pelo Copilot: {total - delegated}
   üìà Taxa de delega√ß√£o: {(delegated/total*100) if total > 0 else 0:.1f}%

üéØ Efici√™ncia:
   Copilot focou em: Arquitetura e decis√µes complexas
   Qwen executou: Tarefas repetitivas e bem definidas
   
‚úÖ Resultado: Produtividade maximizada!
"""
        print(report)

# Exemplo de uso simulando uma sess√£o real
def simulate_real_session():
    """Simula uma sess√£o real de trabalho"""
    
    # Copilot iniciando trabalho em um projeto
    agent = AutonomousAgent(project_path="./my_project")
    
    print("üöÄ Copilot CLI iniciado em: ./my_project")
    print("üìÇ Projeto analisado, contexto carregado\n")
    
    # Durante o trabalho, v√°rias tarefas surgem
    tasks = [
        ("Criar testes unit√°rios para o m√≥dulo auth.py", 2),
        ("Projetar arquitetura para sistema de cache distribu√≠do", 5),
        ("Adicionar docstrings em todas as fun√ß√µes do utils.py", 1),
        ("Implementar algoritmo de busca A* otimizado", 4),
        ("Formatar c√≥digo seguindo PEP8", 1),
        ("Integrar servi√ßo de autentica√ß√£o OAuth2", 3),
        ("Traduzir mensagens de erro para portugu√™s", 1),
    ]
    
    # Copilot recebe e processa cada tarefa automaticamente
    for task_desc, priority in tasks:
        agent.receive_task(task_desc, priority)
    
    # Executa coordena√ß√£o aut√¥noma
    agent.monitor_and_coordinate()

if __name__ == "__main__":
    simulate_real_session()
