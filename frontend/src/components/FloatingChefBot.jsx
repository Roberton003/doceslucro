import React, { useState, useEffect, useRef } from 'react';
import './FloatingChefBot.css';

const FloatingChefBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: 'Ol√°, chef! üëã Sou o seu assistente culin√°rio. Como posso ajudar?',
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showGreeting, setShowGreeting] = useState(true);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  // Auto-scroll para √∫ltima mensagem
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus no input quando abrir
  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  // Esconder sauda√ß√£o ap√≥s 5 segundos
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowGreeting(false);
    }, 5000);
    return () => clearTimeout(timer);
  }, []);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    // Adicionar mensagem do usu√°rio
    const userMessage = {
      id: messages.length + 1,
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages([...messages, userMessage]);
    setInputValue('');
    setIsLoading(true);

    // Simular resposta da IA (depois conectar com backend)
    setTimeout(() => {
      const botResponse = {
        id: messages.length + 2,
        text: getBotResponse(inputValue),
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botResponse]);
      setIsLoading(false);
    }, 800);
  };

  const getBotResponse = (userMessage) => {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('receita') || lowerMessage.includes('como fazer')) {
      return 'üç≥ Que legal! Posso te ajudar com receitas deliciosas! Qual tipo de prato voc√™ est√° afim de fazer? Doce, salgado, entrada, prato principal?';
    }
    if (lowerMessage.includes('caloria') || lowerMessage.includes('nutri√ß√£o')) {
      return 'üìä √ìtimo! Posso calcular as calorias e informa√ß√µes nutricionais das receitas. Qual receita voc√™ quer analisar?';
    }
    if (lowerMessage.includes('ingrediente')) {
      return 'ü•ï Perfeito! Tenho informa√ß√µes sobre diversos ingredientes. Qual ingrediente voc√™ quer conhecer melhor?';
    }
    if (lowerMessage.includes('t√©cnica') || lowerMessage.includes('como cozinhar')) {
      return 'üë®‚Äçüç≥ Adorei! Posso ensinar t√©cnicas culin√°ria incr√≠veis! Qual tipo de t√©cnica te interessa?';
    }
    if (lowerMessage.includes('obrigado') || lowerMessage.includes('valeu')) {
      return 'üòä De nada, chef! Estou sempre aqui pra ajudar! Tem mais alguma coisa?';
    }
    return 'üçΩÔ∏è Entendi! Deixa eu pensar... Pode me dar mais detalhes? Estou aqui pra ajudar com receitas, ingredientes, t√©cnicas e c√°lculos nutricionais!';
  };

  const handleClose = () => {
    setIsOpen(false);
  };

  const handleToggle = () => {
    setIsOpen(!isOpen);
  };

  return (
    <>
      {/* Bot√£o Flutuante */}
      <div className={`chef-bot-button ${isOpen ? 'active' : ''}`} onClick={handleToggle}>
        <div className="bot-icon">üç≥</div>
        <div className={`pulse-ring ${isOpen ? 'hidden' : ''}`}></div>
      </div>

      {/* Sauda√ß√£o Flutuante */}
      {!isOpen && showGreeting && (
        <div className="greeting-bubble">
          <span>Posso te ajudar? üëã</span>
          <div className="arrow"></div>
        </div>
      )}

      {/* Janela de Chat */}
      <div className={`chef-bot-window ${isOpen ? 'open' : ''}`}>
        {/* Cabe√ßalho */}
        <div className="chat-header">
          <div className="header-content">
            <div className="bot-avatar">üç≥</div>
            <div className="header-info">
              <h3>ChefBot</h3>
              <p>Assistente Culin√°rio</p>
            </div>
          </div>
          <button className="close-btn" onClick={handleClose}>√ó</button>
        </div>

        {/* Corpo do Chat */}
        <div className="chat-body">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
            >
              <div className="message-bubble">
                <p>{message.text}</p>
                <span className="timestamp">
                  {message.timestamp.toLocaleTimeString('pt-BR', {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </span>
              </div>
            </div>
          ))}

          {isLoading && (
            <div className="message bot-message">
              <div className="message-bubble loading">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Rodap√© com Input */}
        <form className="chat-footer" onSubmit={handleSendMessage}>
          <input
            ref={inputRef}
            type="text"
            placeholder="Fa√ßa sua pergunta..."
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            disabled={isLoading}
            className="chat-input"
          />
          <button type="submit" disabled={isLoading} className="send-btn">
            üçΩÔ∏è
          </button>
        </form>
      </div>

      {/* Overlay */}
      {isOpen && <div className="chat-overlay" onClick={handleClose}></div>}
    </>
  );
};

export default FloatingChefBot;
